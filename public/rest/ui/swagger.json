{
  "swagger": "2.0",
  "info" : {
    "description" : "<h1>server<\/h1>",
    "version" : "3.0.0",
    "title" : "server"
  },
  "schemes" : [],
  "tags" : [
    {
      "name" : "BlockchainResource"
      ,
      "description" : "Rest resource for a reader node on pbc."
    }
  ],
  "definitions" : {
    "AccountStateDto" : {
      "type" : "object",
      "title" : "AccountStateDto",
      "required" : ["nonce"],
          "properties" : {
            "nonce" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          },
      "example" : {
  "nonce" : 12345
},
      "description" : ""
    }
    ,
    "AvlKeyType" : {
      "type" : "string",
      "title" : "AvlKeyType",
          "enum" : [
            "STRING",
            "INTEGER",
            "LONG",
            "BLOCKCHAIN_ADDRESS"
          ],
      "description" : ""
    }
    ,
    "AvlTraverseDto" : {
      "type" : "object",
      "title" : "AvlTraverseDto",
          "properties" : {
            "keyType" : {
            "readOnly" : false,
"$ref" : "#/definitions/AvlKeyType",
"description" : ""
            },
            "key" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "keyType" : "LONG",
  "key" : "..."
},
      "description" : "Traversal structure for reading small parts of a large state."
    }
    ,
    "BlockDto" : {
      "type" : "object",
      "title" : "BlockDto",
      "required" : ["blockTime", "productionTime"],
          "properties" : {
            "state" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "blockTime" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            },
            "parentBlock" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "transactions" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "identifier" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "productionTime" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          },
      "example" : {
  "state" : "...",
  "blockTime" : 12345,
  "parentBlock" : "...",
  "transactions" : [ "...", "..." ],
  "identifier" : "...",
  "productionTime" : 12345
},
      "description" : ""
    }
    ,
    "ChainIdDto" : {
      "type" : "object",
      "title" : "ChainIdDto",
          "properties" : {
            "chainId" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "chainId" : "..."
},
      "description" : ""
    }
    ,
    "ContractStateDto" : {
      "type" : "object",
      "title" : "ContractStateDto",
      "required" : ["storageLength"],
          "properties" : {
            "address" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "owner" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "serializedContract" : {
            "readOnly" : false,
"description" : "",
"type" : "object"
            },
            "jarHash" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "type" : {
            "readOnly" : false,
"$ref" : "#/definitions/ContractType",
"description" : ""
            },
            "storageLength" : {
            "readOnly" : false,
"description" : "",
"type" : "integer",
"format" : "int64"
            }
          },
      "example" : {
  "address" : "...",
  "owner" : "...",
  "serializedContract" : { },
  "jarHash" : "...",
  "type" : "SYSTEM",
  "storageLength" : 12345
},
      "description" : ""
    }
    ,
    "ContractType" : {
      "type" : "string",
      "title" : "ContractType",
          "enum" : [
            "SYSTEM",
            "PUBLIC",
            "ZERO_KNOWLEDGE"
          ],
      "description" : ""
    }
    ,
    "EventDto" : {
      "type" : "object",
      "title" : "EventDto",
          "properties" : {
            "destinationShard" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "identifier" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "destinationShard" : "...",
  "identifier" : "..."
},
      "description" : ""
    }
    ,
    "ExecutedTransactionDto" : {
      "type" : "object",
      "title" : "ExecutedTransactionDto",
      "required" : ["finalized", "executionSucceeded"],
          "properties" : {
            "from" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "interactionJarHash" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "finalized" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "transactionPayload" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "interactionContractType" : {
            "readOnly" : false,
"$ref" : "#/definitions/ContractType",
"description" : ""
            },
            "executionSucceeded" : {
            "readOnly" : false,
"description" : "",
"type" : "boolean"
            },
            "events" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/EventDto"
}
            },
            "block" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            },
            "identifier" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "from" : "...",
  "interactionJarHash" : "...",
  "finalized" : true,
  "transactionPayload" : "...",
  "interactionContractType" : "SYSTEM",
  "executionSucceeded" : true,
  "events" : [ {
    "destinationShard" : "...",
    "identifier" : "..."
  }, {
    "destinationShard" : "...",
    "identifier" : "..."
  } ],
  "block" : "...",
  "identifier" : "..."
},
      "description" : ""
    }
    ,
    "FeatureDto" : {
      "type" : "object",
      "title" : "FeatureDto",
          "properties" : {
            "value" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "value" : "..."
},
      "description" : ""
    }
    ,
    "FieldTraverseDto" : {
      "type" : "object",
      "title" : "FieldTraverseDto",
          "properties" : {
            "name" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "name" : "..."
},
      "description" : "Traversal structure for reading small parts of a large state."
    }
    ,
    "IncomingTransactionDto" : {
      "type" : "object",
      "title" : "IncomingTransactionDto",
          "properties" : {
            "transactionPayload" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "transactionPayload" : "..."
},
      "description" : ""
    }
    ,
    "JarDto" : {
      "type" : "object",
      "title" : "JarDto",
          "properties" : {
            "jar" : {
            "readOnly" : false,
"description" : "",
"type" : "string"
            }
          },
      "example" : {
  "jar" : "..."
},
      "description" : ""
    }
    ,
    "TraverseDto" : {
      "discriminator" : "type",
      "type" : "object",
      "title" : "TraverseDto",
          "properties" : {
            "type" : {
            "readOnly" : false,
"description" : "The JSON object type.",
"type" : "string"
            }
          },
      "example" : {
  "type" : "..."
},
      "description" : "Traversal structure for reading small parts of a large state."
    }
    ,
    "TraversePathDto" : {
      "type" : "object",
      "title" : "TraversePathDto",
          "properties" : {
            "path" : {
            "readOnly" : false,
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/TraverseDto"
}
            }
          },
      "example" : {
  "path" : [ {
    "type" : "..."
  }, {
    "type" : "..."
  } ]
},
      "description" : ""
    }
  },
  "paths": {
    "\/blockchain" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "This is a status page for uptime statistics.",
        "operationId" : "status",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "204 No Content when everything is good",
"type" : "file"
            },
            "description" : "204 No Content when everything is good"
          }
        }
      }
    },
    "\/blockchain/account/{address}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Given an account address this method returns the account state for the given account.\nIf the account does not exist the method yields a 404 Not Found.",
        "operationId" : "getAccountState",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "address",
            "in" : "path",
            "type" : "string",
            "description" : "the address of the account state"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/AccountStateDto",
"description" : "the account state"
            },
            "examples" : {
              "application/json" : {
  "nonce" : 12345
}
            },
            "description" : "the account state"
          }
        }
      }
    },
    "\/blockchain/accountPlugin/global" : {
      "post" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve sub-state of the account plugin's global state by traversing its fields.",
        "operationId" : "traverseGlobalAccountState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/TraversePathDto",
"description" : "the dto containing the path to the desired sub-state"
            },
            "description" : "the dto containing the path to the desired sub-state"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "the sub-state as a JsonNode",
"type" : "file"
            },
            "description" : "the sub-state as a JsonNode"
          }
        }
      }
    },
    "\/blockchain/accountPlugin/local" : {
      "post" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve sub-state of the account plugin's local state by traversing its fields.",
        "operationId" : "traverseLocalAccountState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/TraversePathDto",
"description" : "the dto containing the path to the desired sub-state"
            },
            "description" : "the dto containing the path to the desired sub-state"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "the sub-state as a JsonNode",
"type" : "file"
            },
            "description" : "the sub-state as a JsonNode"
          }
        }
      }
    },
    "\/blockchain/blocks/blockTime/{blockTime}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve a block given the  block time.",
        "operationId" : "getBlockFromNumber",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "blockTime",
            "in" : "path",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "description" : "the block time of the block"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/BlockDto",
"description" : "the block"
            },
            "examples" : {
              "application/json" : {
  "state" : "...",
  "blockTime" : 12345,
  "parentBlock" : "...",
  "transactions" : [ "...", "..." ],
  "identifier" : "...",
  "productionTime" : 12345
}
            },
            "description" : "the block"
          }
        }
      }
    },
    "\/blockchain/blocks/latest" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve the latest block for the running chain.",
        "operationId" : "getLatestBlock",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/BlockDto",
"description" : "the block"
            },
            "examples" : {
              "application/json" : {
  "state" : "...",
  "blockTime" : 12345,
  "parentBlock" : "...",
  "transactions" : [ "...", "..." ],
  "identifier" : "...",
  "productionTime" : 12345
}
            },
            "description" : "the block"
          }
        }
      }
    },
    "\/blockchain/blocks/latest/transactions" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve transactions of the latest block.",
        "operationId" : "getLatestTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "the list of transactions",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/ExecutedTransactionDto"
}
            },
            "examples" : {
              "application/json" : [ {
  "from" : "...",
  "interactionJarHash" : "...",
  "finalized" : true,
  "transactionPayload" : "...",
  "interactionContractType" : "PUBLIC",
  "executionSucceeded" : true,
  "events" : [ {
    "destinationShard" : "...",
    "identifier" : "..."
  }, {
    "destinationShard" : "...",
    "identifier" : "..."
  } ],
  "block" : "...",
  "identifier" : "..."
} ]
            },
            "description" : "the list of transactions"
          }
        }
      }
    },
    "\/blockchain/blocks/{blockHash}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieves a block from a hash.",
        "operationId" : "getBlock",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "blockHash",
            "in" : "path",
            "type" : "string",
            "description" : "the hash of the block"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/BlockDto",
"description" : "the block"
            },
            "examples" : {
              "application/json" : {
  "state" : "...",
  "blockTime" : 12345,
  "parentBlock" : "...",
  "transactions" : [ "...", "..." ],
  "identifier" : "...",
  "productionTime" : 12345
}
            },
            "description" : "the block"
          }
        }
      }
    },
    "\/blockchain/blocks/{blockHash}/transactions" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve all transactions of specific block.",
        "operationId" : "getTransactionsForBlock",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "blockHash",
            "in" : "path",
            "type" : "string",
            "description" : "the hash of the block"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "the list of transactions",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/ExecutedTransactionDto"
}
            },
            "examples" : {
              "application/json" : [ {
  "from" : "...",
  "interactionJarHash" : "...",
  "finalized" : true,
  "transactionPayload" : "...",
  "interactionContractType" : "SYSTEM",
  "executionSucceeded" : true,
  "events" : [ {
    "destinationShard" : "...",
    "identifier" : "..."
  }, {
    "destinationShard" : "...",
    "identifier" : "..."
  } ],
  "block" : "...",
  "identifier" : "..."
} ]
            },
            "description" : "the list of transactions"
          }
        }
      }
    },
    "\/blockchain/bootState" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Get the state of the boot contract. Requires that the BootAddress feature has been set in the\nblockchain state.",
        "operationId" : "getBootState",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "the state of the boot contract",
"type" : "file"
            },
            "description" : "the state of the boot contract"
          }
        }
      }
    },
    "\/blockchain/chainId" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "This method returns the chain identifier for the running node.",
        "operationId" : "chainId",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/ChainIdDto",
"description" : "the chain id as a DTO"
            },
            "examples" : {
              "application/json" : {
  "chainId" : "..."
}
            },
            "description" : "the chain id as a DTO"
          }
        }
      }
    },
    "\/blockchain/consensusJar" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Get the consensus plugin jar for the running chain.",
        "operationId" : "consensusJar",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/JarDto",
"description" : "the consensus plugin jar data object"
            },
            "examples" : {
              "application/json" : {
  "jar" : "..."
}
            },
            "description" : "the consensus plugin jar data object"
          }
        }
      }
    },
    "\/blockchain/consensusPlugin/global" : {
      "post" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve sub-state of the consensus plugin's global state by traversing its fields.",
        "operationId" : "traverseGlobalConsensusState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/TraversePathDto",
"description" : "the dto containing the path to the desired sub-state"
            },
            "description" : "the dto containing the path to the desired sub-state"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "the sub-state as a JsonNode",
"type" : "file"
            },
            "description" : "the sub-state as a JsonNode"
          }
        }
      }
    },
    "\/blockchain/contracts/{address}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieves a contract state given a contract address.\n<p>\n404 Not Found if the contract does not exist.\n<p>\n400 Bad Request if the address specified is of the wrong type e.g. an account address.",
        "operationId" : "getContract",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "address",
            "in" : "path",
            "type" : "string",
            "description" : "the address of the contract"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/ContractStateDto",
"description" : "the contract state"
            },
            "examples" : {
              "application/json" : {
  "address" : "...",
  "owner" : "...",
  "serializedContract" : { },
  "jarHash" : "...",
  "type" : "ZERO_KNOWLEDGE",
  "storageLength" : 12345
}
            },
            "description" : "the contract state"
          }
        }
      },
      "post" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve sub-state of contract from address by traversing its fields.",
        "operationId" : "traverseContractState",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "address",
            "in" : "path",
            "type" : "string",
            "description" : "the address of the contract"
          },
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/TraversePathDto",
"description" : "the dto containing the path to the desired sub-state"
            },
            "description" : "the dto containing the path to the desired sub-state"
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "the sub-state as a JsonNode",
"type" : "file"
            },
            "description" : "the sub-state as a JsonNode"
          }
        }
      }
    },
    "\/blockchain/event" : {
      "put" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "This sends an event transaction through this node.\n<p>\n400 Bad Request if the event is invalid.",
        "operationId" : "pushEvent",
        "consumes" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/IncomingTransactionDto",
"description" : "the transaction to send"
            },
            "description" : "the transaction to send"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "\/blockchain/event/{eventIdentifier}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve an event from hash.",
        "operationId" : "getEventTransaction",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "eventIdentifier",
            "in" : "path",
            "type" : "string",
            "description" : "the hash of the event"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/EventDto",
"description" : "the event"
            },
            "examples" : {
              "application/json" : {
  "destinationShard" : "...",
  "identifier" : "..."
}
            },
            "description" : "the event"
          }
        }
      }
    },
    "\/blockchain/features/{feature}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Retrieve the value of a feature from the blockchain.",
        "operationId" : "getFeatures",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "feature",
            "in" : "path",
            "type" : "string",
            "description" : "the key of the feature"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/FeatureDto",
"description" : "the current value of the feature"
            },
            "examples" : {
              "application/json" : {
  "value" : "..."
}
            },
            "description" : "the current value of the feature"
          }
        }
      }
    },
    "\/blockchain/transaction" : {
      "put" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Push transaction to the blockchain.",
        "operationId" : "pushTransaction",
        "consumes" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "body",
            "required" : false,
            "in" : "body",
            "schema" : {
"$ref" : "#/definitions/IncomingTransactionDto",
"description" : "the transaction to push"
            },
            "description" : "the transaction to push"
          }
        ],
        "responses" : {
          "204" : {
            "description" : "Success"
          }
        }
      }
    },
    "\/blockchain/transaction/{transactionHash}" : {
      "get" : {
        "tags" : [ "BlockchainResource" ],
        "description" : "Get a the transaction for the given hash. If no transaction is found it returns a 404 Not Found.",
        "operationId" : "getTransaction",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "transactionHash",
            "in" : "path",
            "type" : "string",
            "description" : "the hash of the transaction"
          },
          {
            "name" : "requireFinal",
            "in" : "query",
            "default" : "true",
            "type" : "boolean",
            "description" : "require found transaction to be finalized"
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"$ref" : "#/definitions/ExecutedTransactionDto",
"description" : "the transaction"
            },
            "examples" : {
              "application/json" : {
  "from" : "...",
  "interactionJarHash" : "...",
  "finalized" : true,
  "transactionPayload" : "...",
  "interactionContractType" : "ZERO_KNOWLEDGE",
  "executionSucceeded" : true,
  "events" : [ {
    "destinationShard" : "...",
    "identifier" : "..."
  }, {
    "destinationShard" : "...",
    "identifier" : "..."
  } ],
  "block" : "...",
  "identifier" : "..."
}
            },
            "description" : "the transaction"
          }
        }
      }
    }
  }
}
